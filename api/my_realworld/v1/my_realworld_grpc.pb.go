// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.0
// source: api/my_realworld/v1/my_realworld.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MyRealworld_Auth_FullMethodName              = "/api.my_realworld.v1.MyRealworld/Auth"
	MyRealworld_Register_FullMethodName          = "/api.my_realworld.v1.MyRealworld/Register"
	MyRealworld_CurrentUser_FullMethodName       = "/api.my_realworld.v1.MyRealworld/CurrentUser"
	MyRealworld_UpdateUser_FullMethodName        = "/api.my_realworld.v1.MyRealworld/UpdateUser"
	MyRealworld_GetUser_FullMethodName           = "/api.my_realworld.v1.MyRealworld/GetUser"
	MyRealworld_FollowUser_FullMethodName        = "/api.my_realworld.v1.MyRealworld/FollowUser"
	MyRealworld_UnfollowUser_FullMethodName      = "/api.my_realworld.v1.MyRealworld/UnfollowUser"
	MyRealworld_ArticleList_FullMethodName       = "/api.my_realworld.v1.MyRealworld/ArticleList"
	MyRealworld_ArticleFeed_FullMethodName       = "/api.my_realworld.v1.MyRealworld/ArticleFeed"
	MyRealworld_GetArticle_FullMethodName        = "/api.my_realworld.v1.MyRealworld/GetArticle"
	MyRealworld_CreateArticle_FullMethodName     = "/api.my_realworld.v1.MyRealworld/CreateArticle"
	MyRealworld_UpdateArticle_FullMethodName     = "/api.my_realworld.v1.MyRealworld/UpdateArticle"
	MyRealworld_DeleteArticle_FullMethodName     = "/api.my_realworld.v1.MyRealworld/DeleteArticle"
	MyRealworld_CommentsArticle_FullMethodName   = "/api.my_realworld.v1.MyRealworld/CommentsArticle"
	MyRealworld_GetComments_FullMethodName       = "/api.my_realworld.v1.MyRealworld/GetComments"
	MyRealworld_DeleteComments_FullMethodName    = "/api.my_realworld.v1.MyRealworld/DeleteComments"
	MyRealworld_FavoriteArticle_FullMethodName   = "/api.my_realworld.v1.MyRealworld/FavoriteArticle"
	MyRealworld_UnfavoriteArticle_FullMethodName = "/api.my_realworld.v1.MyRealworld/UnfavoriteArticle"
	MyRealworld_GetTags_FullMethodName           = "/api.my_realworld.v1.MyRealworld/GetTags"
)

// MyRealworldClient is the client API for MyRealworld service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyRealworldClient interface {
	// 认证
	Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthRsp, error)
	// 注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRsp, error)
	// 当前用户
	CurrentUser(ctx context.Context, in *CurrentUserReq, opts ...grpc.CallOption) (*CurrentUserRsp, error)
	// 更新用户
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRsp, error)
	// 获取用户
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserRsp, error)
	// 关注用户
	FollowUser(ctx context.Context, in *FollowUserReq, opts ...grpc.CallOption) (*FollowUserRsp, error)
	// 取消关注用户
	UnfollowUser(ctx context.Context, in *FollowUserReq, opts ...grpc.CallOption) (*FollowUserRsp, error)
	// 列出文章
	ArticleList(ctx context.Context, in *ArticleListReq, opts ...grpc.CallOption) (*ArticleListRsp, error)
	// 引用文章
	ArticleFeed(ctx context.Context, in *ArticleFeedReq, opts ...grpc.CallOption) (*ArticleFeedRsp, error)
	// 获取文章
	GetArticle(ctx context.Context, in *GetArticleReq, opts ...grpc.CallOption) (*GetArticleRsp, error)
	// 创建文章
	CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*CreateArticleRsp, error)
	// 更新文章
	UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*UpdateArticleRsp, error)
	// 删除文章
	DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...grpc.CallOption) (*DeleteArticleRsp, error)
	// 评论文章
	CommentsArticle(ctx context.Context, in *CommentsArticleReq, opts ...grpc.CallOption) (*CommentsArticleRsp, error)
	// 获取评论
	GetComments(ctx context.Context, in *GetCommentsReq, opts ...grpc.CallOption) (*GetCommentsRsp, error)
	// 删除评论
	DeleteComments(ctx context.Context, in *DeleteCommentsReq, opts ...grpc.CallOption) (*DeleteCommentsRsp, error)
	// 标记喜欢的文章
	FavoriteArticle(ctx context.Context, in *FavoriteArticleReq, opts ...grpc.CallOption) (*CommentsArticleRsp, error)
	// 取消标记喜欢的文章
	UnfavoriteArticle(ctx context.Context, in *FavoriteArticleReq, opts ...grpc.CallOption) (*FavoriteArticleReq, error)
	// 获取标签
	GetTags(ctx context.Context, in *GetTagsReq, opts ...grpc.CallOption) (*GetTagsRsp, error)
}

type myRealworldClient struct {
	cc grpc.ClientConnInterface
}

func NewMyRealworldClient(cc grpc.ClientConnInterface) MyRealworldClient {
	return &myRealworldClient{cc}
}

func (c *myRealworldClient) Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthRsp, error) {
	out := new(AuthRsp)
	err := c.cc.Invoke(ctx, MyRealworld_Auth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRsp, error) {
	out := new(RegisterRsp)
	err := c.cc.Invoke(ctx, MyRealworld_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) CurrentUser(ctx context.Context, in *CurrentUserReq, opts ...grpc.CallOption) (*CurrentUserRsp, error) {
	out := new(CurrentUserRsp)
	err := c.cc.Invoke(ctx, MyRealworld_CurrentUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRsp, error) {
	out := new(UpdateUserRsp)
	err := c.cc.Invoke(ctx, MyRealworld_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserRsp, error) {
	out := new(GetUserRsp)
	err := c.cc.Invoke(ctx, MyRealworld_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) FollowUser(ctx context.Context, in *FollowUserReq, opts ...grpc.CallOption) (*FollowUserRsp, error) {
	out := new(FollowUserRsp)
	err := c.cc.Invoke(ctx, MyRealworld_FollowUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) UnfollowUser(ctx context.Context, in *FollowUserReq, opts ...grpc.CallOption) (*FollowUserRsp, error) {
	out := new(FollowUserRsp)
	err := c.cc.Invoke(ctx, MyRealworld_UnfollowUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) ArticleList(ctx context.Context, in *ArticleListReq, opts ...grpc.CallOption) (*ArticleListRsp, error) {
	out := new(ArticleListRsp)
	err := c.cc.Invoke(ctx, MyRealworld_ArticleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) ArticleFeed(ctx context.Context, in *ArticleFeedReq, opts ...grpc.CallOption) (*ArticleFeedRsp, error) {
	out := new(ArticleFeedRsp)
	err := c.cc.Invoke(ctx, MyRealworld_ArticleFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) GetArticle(ctx context.Context, in *GetArticleReq, opts ...grpc.CallOption) (*GetArticleRsp, error) {
	out := new(GetArticleRsp)
	err := c.cc.Invoke(ctx, MyRealworld_GetArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*CreateArticleRsp, error) {
	out := new(CreateArticleRsp)
	err := c.cc.Invoke(ctx, MyRealworld_CreateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*UpdateArticleRsp, error) {
	out := new(UpdateArticleRsp)
	err := c.cc.Invoke(ctx, MyRealworld_UpdateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...grpc.CallOption) (*DeleteArticleRsp, error) {
	out := new(DeleteArticleRsp)
	err := c.cc.Invoke(ctx, MyRealworld_DeleteArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) CommentsArticle(ctx context.Context, in *CommentsArticleReq, opts ...grpc.CallOption) (*CommentsArticleRsp, error) {
	out := new(CommentsArticleRsp)
	err := c.cc.Invoke(ctx, MyRealworld_CommentsArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) GetComments(ctx context.Context, in *GetCommentsReq, opts ...grpc.CallOption) (*GetCommentsRsp, error) {
	out := new(GetCommentsRsp)
	err := c.cc.Invoke(ctx, MyRealworld_GetComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) DeleteComments(ctx context.Context, in *DeleteCommentsReq, opts ...grpc.CallOption) (*DeleteCommentsRsp, error) {
	out := new(DeleteCommentsRsp)
	err := c.cc.Invoke(ctx, MyRealworld_DeleteComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) FavoriteArticle(ctx context.Context, in *FavoriteArticleReq, opts ...grpc.CallOption) (*CommentsArticleRsp, error) {
	out := new(CommentsArticleRsp)
	err := c.cc.Invoke(ctx, MyRealworld_FavoriteArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) UnfavoriteArticle(ctx context.Context, in *FavoriteArticleReq, opts ...grpc.CallOption) (*FavoriteArticleReq, error) {
	out := new(FavoriteArticleReq)
	err := c.cc.Invoke(ctx, MyRealworld_UnfavoriteArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myRealworldClient) GetTags(ctx context.Context, in *GetTagsReq, opts ...grpc.CallOption) (*GetTagsRsp, error) {
	out := new(GetTagsRsp)
	err := c.cc.Invoke(ctx, MyRealworld_GetTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyRealworldServer is the server API for MyRealworld service.
// All implementations must embed UnimplementedMyRealworldServer
// for forward compatibility
type MyRealworldServer interface {
	// 认证
	Auth(context.Context, *AuthReq) (*AuthRsp, error)
	// 注册
	Register(context.Context, *RegisterReq) (*RegisterRsp, error)
	// 当前用户
	CurrentUser(context.Context, *CurrentUserReq) (*CurrentUserRsp, error)
	// 更新用户
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserRsp, error)
	// 获取用户
	GetUser(context.Context, *GetUserReq) (*GetUserRsp, error)
	// 关注用户
	FollowUser(context.Context, *FollowUserReq) (*FollowUserRsp, error)
	// 取消关注用户
	UnfollowUser(context.Context, *FollowUserReq) (*FollowUserRsp, error)
	// 列出文章
	ArticleList(context.Context, *ArticleListReq) (*ArticleListRsp, error)
	// 引用文章
	ArticleFeed(context.Context, *ArticleFeedReq) (*ArticleFeedRsp, error)
	// 获取文章
	GetArticle(context.Context, *GetArticleReq) (*GetArticleRsp, error)
	// 创建文章
	CreateArticle(context.Context, *CreateArticleReq) (*CreateArticleRsp, error)
	// 更新文章
	UpdateArticle(context.Context, *UpdateArticleReq) (*UpdateArticleRsp, error)
	// 删除文章
	DeleteArticle(context.Context, *DeleteArticleReq) (*DeleteArticleRsp, error)
	// 评论文章
	CommentsArticle(context.Context, *CommentsArticleReq) (*CommentsArticleRsp, error)
	// 获取评论
	GetComments(context.Context, *GetCommentsReq) (*GetCommentsRsp, error)
	// 删除评论
	DeleteComments(context.Context, *DeleteCommentsReq) (*DeleteCommentsRsp, error)
	// 标记喜欢的文章
	FavoriteArticle(context.Context, *FavoriteArticleReq) (*CommentsArticleRsp, error)
	// 取消标记喜欢的文章
	UnfavoriteArticle(context.Context, *FavoriteArticleReq) (*FavoriteArticleReq, error)
	// 获取标签
	GetTags(context.Context, *GetTagsReq) (*GetTagsRsp, error)
	mustEmbedUnimplementedMyRealworldServer()
}

// UnimplementedMyRealworldServer must be embedded to have forward compatible implementations.
type UnimplementedMyRealworldServer struct {
}

func (UnimplementedMyRealworldServer) Auth(context.Context, *AuthReq) (*AuthRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedMyRealworldServer) Register(context.Context, *RegisterReq) (*RegisterRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMyRealworldServer) CurrentUser(context.Context, *CurrentUserReq) (*CurrentUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentUser not implemented")
}
func (UnimplementedMyRealworldServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedMyRealworldServer) GetUser(context.Context, *GetUserReq) (*GetUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedMyRealworldServer) FollowUser(context.Context, *FollowUserReq) (*FollowUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedMyRealworldServer) UnfollowUser(context.Context, *FollowUserReq) (*FollowUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUser not implemented")
}
func (UnimplementedMyRealworldServer) ArticleList(context.Context, *ArticleListReq) (*ArticleListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleList not implemented")
}
func (UnimplementedMyRealworldServer) ArticleFeed(context.Context, *ArticleFeedReq) (*ArticleFeedRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleFeed not implemented")
}
func (UnimplementedMyRealworldServer) GetArticle(context.Context, *GetArticleReq) (*GetArticleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedMyRealworldServer) CreateArticle(context.Context, *CreateArticleReq) (*CreateArticleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedMyRealworldServer) UpdateArticle(context.Context, *UpdateArticleReq) (*UpdateArticleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedMyRealworldServer) DeleteArticle(context.Context, *DeleteArticleReq) (*DeleteArticleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedMyRealworldServer) CommentsArticle(context.Context, *CommentsArticleReq) (*CommentsArticleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentsArticle not implemented")
}
func (UnimplementedMyRealworldServer) GetComments(context.Context, *GetCommentsReq) (*GetCommentsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedMyRealworldServer) DeleteComments(context.Context, *DeleteCommentsReq) (*DeleteCommentsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComments not implemented")
}
func (UnimplementedMyRealworldServer) FavoriteArticle(context.Context, *FavoriteArticleReq) (*CommentsArticleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteArticle not implemented")
}
func (UnimplementedMyRealworldServer) UnfavoriteArticle(context.Context, *FavoriteArticleReq) (*FavoriteArticleReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfavoriteArticle not implemented")
}
func (UnimplementedMyRealworldServer) GetTags(context.Context, *GetTagsReq) (*GetTagsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedMyRealworldServer) mustEmbedUnimplementedMyRealworldServer() {}

// UnsafeMyRealworldServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyRealworldServer will
// result in compilation errors.
type UnsafeMyRealworldServer interface {
	mustEmbedUnimplementedMyRealworldServer()
}

func RegisterMyRealworldServer(s grpc.ServiceRegistrar, srv MyRealworldServer) {
	s.RegisterService(&MyRealworld_ServiceDesc, srv)
}

func _MyRealworld_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).Auth(ctx, req.(*AuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_CurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).CurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_CurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).CurrentUser(ctx, req.(*CurrentUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).FollowUser(ctx, req.(*FollowUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_UnfollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_UnfollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).UnfollowUser(ctx, req.(*FollowUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_ArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).ArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_ArticleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).ArticleList(ctx, req.(*ArticleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_ArticleFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleFeedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).ArticleFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_ArticleFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).ArticleFeed(ctx, req.(*ArticleFeedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_GetArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).GetArticle(ctx, req.(*GetArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_CreateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).CreateArticle(ctx, req.(*CreateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).UpdateArticle(ctx, req.(*UpdateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).DeleteArticle(ctx, req.(*DeleteArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_CommentsArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentsArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).CommentsArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_CommentsArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).CommentsArticle(ctx, req.(*CommentsArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_GetComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).GetComments(ctx, req.(*GetCommentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_DeleteComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).DeleteComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_DeleteComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).DeleteComments(ctx, req.(*DeleteCommentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_FavoriteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).FavoriteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_FavoriteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).FavoriteArticle(ctx, req.(*FavoriteArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_UnfavoriteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).UnfavoriteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_UnfavoriteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).UnfavoriteArticle(ctx, req.(*FavoriteArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyRealworld_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyRealworldServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyRealworld_GetTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyRealworldServer).GetTags(ctx, req.(*GetTagsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MyRealworld_ServiceDesc is the grpc.ServiceDesc for MyRealworld service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyRealworld_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.my_realworld.v1.MyRealworld",
	HandlerType: (*MyRealworldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _MyRealworld_Auth_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _MyRealworld_Register_Handler,
		},
		{
			MethodName: "CurrentUser",
			Handler:    _MyRealworld_CurrentUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _MyRealworld_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _MyRealworld_GetUser_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _MyRealworld_FollowUser_Handler,
		},
		{
			MethodName: "UnfollowUser",
			Handler:    _MyRealworld_UnfollowUser_Handler,
		},
		{
			MethodName: "ArticleList",
			Handler:    _MyRealworld_ArticleList_Handler,
		},
		{
			MethodName: "ArticleFeed",
			Handler:    _MyRealworld_ArticleFeed_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _MyRealworld_GetArticle_Handler,
		},
		{
			MethodName: "CreateArticle",
			Handler:    _MyRealworld_CreateArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _MyRealworld_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _MyRealworld_DeleteArticle_Handler,
		},
		{
			MethodName: "CommentsArticle",
			Handler:    _MyRealworld_CommentsArticle_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _MyRealworld_GetComments_Handler,
		},
		{
			MethodName: "DeleteComments",
			Handler:    _MyRealworld_DeleteComments_Handler,
		},
		{
			MethodName: "FavoriteArticle",
			Handler:    _MyRealworld_FavoriteArticle_Handler,
		},
		{
			MethodName: "UnfavoriteArticle",
			Handler:    _MyRealworld_UnfavoriteArticle_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _MyRealworld_GetTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/my_realworld/v1/my_realworld.proto",
}
