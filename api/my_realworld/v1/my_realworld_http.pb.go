// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v3.20.0
// source: my_realworld/v1/my_realworld.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMyRealworldArticleFeed = "/api.my_realworld.v1.MyRealworld/ArticleFeed"
const OperationMyRealworldArticleList = "/api.my_realworld.v1.MyRealworld/ArticleList"
const OperationMyRealworldAuth = "/api.my_realworld.v1.MyRealworld/Auth"
const OperationMyRealworldCommentsArticle = "/api.my_realworld.v1.MyRealworld/CommentsArticle"
const OperationMyRealworldCreateArticle = "/api.my_realworld.v1.MyRealworld/CreateArticle"
const OperationMyRealworldCurrentUser = "/api.my_realworld.v1.MyRealworld/CurrentUser"
const OperationMyRealworldDeleteArticle = "/api.my_realworld.v1.MyRealworld/DeleteArticle"
const OperationMyRealworldDeleteComments = "/api.my_realworld.v1.MyRealworld/DeleteComments"
const OperationMyRealworldFavoriteArticle = "/api.my_realworld.v1.MyRealworld/FavoriteArticle"
const OperationMyRealworldFollowUser = "/api.my_realworld.v1.MyRealworld/FollowUser"
const OperationMyRealworldGetArticle = "/api.my_realworld.v1.MyRealworld/GetArticle"
const OperationMyRealworldGetComments = "/api.my_realworld.v1.MyRealworld/GetComments"
const OperationMyRealworldGetTags = "/api.my_realworld.v1.MyRealworld/GetTags"
const OperationMyRealworldGetUser = "/api.my_realworld.v1.MyRealworld/GetUser"
const OperationMyRealworldRegister = "/api.my_realworld.v1.MyRealworld/Register"
const OperationMyRealworldUnfavoriteArticle = "/api.my_realworld.v1.MyRealworld/UnfavoriteArticle"
const OperationMyRealworldUnfollowUser = "/api.my_realworld.v1.MyRealworld/UnfollowUser"
const OperationMyRealworldUpdateArticle = "/api.my_realworld.v1.MyRealworld/UpdateArticle"
const OperationMyRealworldUpdateUser = "/api.my_realworld.v1.MyRealworld/UpdateUser"

type MyRealworldHTTPServer interface {
	// ArticleFeed 引用文章
	ArticleFeed(context.Context, *ArticleFeedReq) (*ArticleFeedRsp, error)
	// ArticleList 列出文章
	ArticleList(context.Context, *ArticleListReq) (*ArticleListRsp, error)
	// Auth 认证
	Auth(context.Context, *AuthReq) (*AuthRsp, error)
	// CommentsArticle 评论文章
	CommentsArticle(context.Context, *CommentsArticleReq) (*CommentsArticleRsp, error)
	// CreateArticle 创建文章
	CreateArticle(context.Context, *CreateArticleReq) (*CreateArticleRsp, error)
	// CurrentUser 当前用户
	CurrentUser(context.Context, *CurrentUserReq) (*CurrentUserRsp, error)
	// DeleteArticle 删除文章
	DeleteArticle(context.Context, *DeleteArticleReq) (*DeleteArticleRsp, error)
	// DeleteComments 删除评论
	DeleteComments(context.Context, *DeleteCommentsReq) (*DeleteCommentsRsp, error)
	// FavoriteArticle 标记喜欢的文章
	FavoriteArticle(context.Context, *FavoriteArticleReq) (*CommentsArticleRsp, error)
	// FollowUser 关注用户
	FollowUser(context.Context, *FollowUserReq) (*FollowUserRsp, error)
	// GetArticle 获取文章
	GetArticle(context.Context, *GetArticleReq) (*GetArticleRsp, error)
	// GetComments 获取评论
	GetComments(context.Context, *GetCommentsReq) (*GetCommentsRsp, error)
	// GetTags 获取标签
	GetTags(context.Context, *GetTagsReq) (*GetTagsRsp, error)
	// GetUser 获取用户
	GetUser(context.Context, *GetUserReq) (*GetUserRsp, error)
	// Register 注册
	Register(context.Context, *RegisterReq) (*RegisterRsp, error)
	// UnfavoriteArticle 取消标记喜欢的文章
	UnfavoriteArticle(context.Context, *FavoriteArticleReq) (*FavoriteArticleReq, error)
	// UnfollowUser 取消关注用户
	UnfollowUser(context.Context, *FollowUserReq) (*FollowUserRsp, error)
	// UpdateArticle 更新文章
	UpdateArticle(context.Context, *UpdateArticleReq) (*UpdateArticleRsp, error)
	// UpdateUser 更新用户
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserRsp, error)
}

func RegisterMyRealworldHTTPServer(s *http.Server, srv MyRealworldHTTPServer) {
	r := s.Route("/")
	r.POST("/api/users/login", _MyRealworld_Auth0_HTTP_Handler(srv))
	r.POST("/api/users", _MyRealworld_Register0_HTTP_Handler(srv))
	r.GET("/api/user", _MyRealworld_CurrentUser0_HTTP_Handler(srv))
	r.PUT("/api/user", _MyRealworld_UpdateUser0_HTTP_Handler(srv))
	r.GET("/api/profiles/{username}", _MyRealworld_GetUser0_HTTP_Handler(srv))
	r.POST("/api/profiles/{username}/follow", _MyRealworld_FollowUser0_HTTP_Handler(srv))
	r.DELETE("/api/profiles/{username}/follow", _MyRealworld_UnfollowUser0_HTTP_Handler(srv))
	r.GET("/api/articles", _MyRealworld_ArticleList0_HTTP_Handler(srv))
	r.GET("/api/articles/feed", _MyRealworld_ArticleFeed0_HTTP_Handler(srv))
	r.GET("/api/articles/{slug}", _MyRealworld_GetArticle0_HTTP_Handler(srv))
	r.POST("/api/articles", _MyRealworld_CreateArticle0_HTTP_Handler(srv))
	r.PUT("/api/articles/{slug}", _MyRealworld_UpdateArticle0_HTTP_Handler(srv))
	r.DELETE("/api/articles/{slug}", _MyRealworld_DeleteArticle0_HTTP_Handler(srv))
	r.POST("/api/articles/{slug}/comments", _MyRealworld_CommentsArticle0_HTTP_Handler(srv))
	r.GET("/api/articles/{slug}/comments", _MyRealworld_GetComments0_HTTP_Handler(srv))
	r.DELETE("/api/articles/{slug}/comments/{id}", _MyRealworld_DeleteComments0_HTTP_Handler(srv))
	r.POST("/api/articles/{slug}/favorite", _MyRealworld_FavoriteArticle0_HTTP_Handler(srv))
	r.DELETE("/api/articles/{slug}/favorite", _MyRealworld_UnfavoriteArticle0_HTTP_Handler(srv))
	r.GET("/api/tags", _MyRealworld_GetTags0_HTTP_Handler(srv))
}

func _MyRealworld_Auth0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Auth(ctx, req.(*AuthReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_Register0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_CurrentUser0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CurrentUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldCurrentUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CurrentUser(ctx, req.(*CurrentUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CurrentUserRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_UpdateUser0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_GetUser0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_FollowUser0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldFollowUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowUser(ctx, req.(*FollowUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowUserRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_UnfollowUser0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldUnfollowUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnfollowUser(ctx, req.(*FollowUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowUserRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_ArticleList0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldArticleList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleList(ctx, req.(*ArticleListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleListRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_ArticleFeed0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleFeedReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldArticleFeed)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleFeed(ctx, req.(*ArticleFeedReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleFeedRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_GetArticle0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldGetArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticle(ctx, req.(*GetArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_CreateArticle0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateArticleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldCreateArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateArticle(ctx, req.(*CreateArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateArticleRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_UpdateArticle0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateArticleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldUpdateArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateArticle(ctx, req.(*UpdateArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateArticleRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_DeleteArticle0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteArticleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldDeleteArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteArticle(ctx, req.(*DeleteArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteArticleRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_CommentsArticle0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CommentsArticleReq
		if err := ctx.Bind(&in.Comment); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldCommentsArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CommentsArticle(ctx, req.(*CommentsArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommentsArticleRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_GetComments0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommentsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldGetComments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetComments(ctx, req.(*GetCommentsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommentsRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_DeleteComments0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCommentsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldDeleteComments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteComments(ctx, req.(*DeleteCommentsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCommentsRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_FavoriteArticle0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FavoriteArticleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldFavoriteArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FavoriteArticle(ctx, req.(*FavoriteArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommentsArticleRsp)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_UnfavoriteArticle0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FavoriteArticleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldUnfavoriteArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnfavoriteArticle(ctx, req.(*FavoriteArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FavoriteArticleReq)
		return ctx.Result(200, reply)
	}
}

func _MyRealworld_GetTags0_HTTP_Handler(srv MyRealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTagsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMyRealworldGetTags)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTags(ctx, req.(*GetTagsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTagsRsp)
		return ctx.Result(200, reply)
	}
}

type MyRealworldHTTPClient interface {
	ArticleFeed(ctx context.Context, req *ArticleFeedReq, opts ...http.CallOption) (rsp *ArticleFeedRsp, err error)
	ArticleList(ctx context.Context, req *ArticleListReq, opts ...http.CallOption) (rsp *ArticleListRsp, err error)
	Auth(ctx context.Context, req *AuthReq, opts ...http.CallOption) (rsp *AuthRsp, err error)
	CommentsArticle(ctx context.Context, req *CommentsArticleReq, opts ...http.CallOption) (rsp *CommentsArticleRsp, err error)
	CreateArticle(ctx context.Context, req *CreateArticleReq, opts ...http.CallOption) (rsp *CreateArticleRsp, err error)
	CurrentUser(ctx context.Context, req *CurrentUserReq, opts ...http.CallOption) (rsp *CurrentUserRsp, err error)
	DeleteArticle(ctx context.Context, req *DeleteArticleReq, opts ...http.CallOption) (rsp *DeleteArticleRsp, err error)
	DeleteComments(ctx context.Context, req *DeleteCommentsReq, opts ...http.CallOption) (rsp *DeleteCommentsRsp, err error)
	FavoriteArticle(ctx context.Context, req *FavoriteArticleReq, opts ...http.CallOption) (rsp *CommentsArticleRsp, err error)
	FollowUser(ctx context.Context, req *FollowUserReq, opts ...http.CallOption) (rsp *FollowUserRsp, err error)
	GetArticle(ctx context.Context, req *GetArticleReq, opts ...http.CallOption) (rsp *GetArticleRsp, err error)
	GetComments(ctx context.Context, req *GetCommentsReq, opts ...http.CallOption) (rsp *GetCommentsRsp, err error)
	GetTags(ctx context.Context, req *GetTagsReq, opts ...http.CallOption) (rsp *GetTagsRsp, err error)
	GetUser(ctx context.Context, req *GetUserReq, opts ...http.CallOption) (rsp *GetUserRsp, err error)
	Register(ctx context.Context, req *RegisterReq, opts ...http.CallOption) (rsp *RegisterRsp, err error)
	UnfavoriteArticle(ctx context.Context, req *FavoriteArticleReq, opts ...http.CallOption) (rsp *FavoriteArticleReq, err error)
	UnfollowUser(ctx context.Context, req *FollowUserReq, opts ...http.CallOption) (rsp *FollowUserRsp, err error)
	UpdateArticle(ctx context.Context, req *UpdateArticleReq, opts ...http.CallOption) (rsp *UpdateArticleRsp, err error)
	UpdateUser(ctx context.Context, req *UpdateUserReq, opts ...http.CallOption) (rsp *UpdateUserRsp, err error)
}

type MyRealworldHTTPClientImpl struct {
	cc *http.Client
}

func NewMyRealworldHTTPClient(client *http.Client) MyRealworldHTTPClient {
	return &MyRealworldHTTPClientImpl{client}
}

func (c *MyRealworldHTTPClientImpl) ArticleFeed(ctx context.Context, in *ArticleFeedReq, opts ...http.CallOption) (*ArticleFeedRsp, error) {
	var out ArticleFeedRsp
	pattern := "/api/articles/feed"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMyRealworldArticleFeed))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) ArticleList(ctx context.Context, in *ArticleListReq, opts ...http.CallOption) (*ArticleListRsp, error) {
	var out ArticleListRsp
	pattern := "/api/articles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMyRealworldArticleList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) Auth(ctx context.Context, in *AuthReq, opts ...http.CallOption) (*AuthRsp, error) {
	var out AuthRsp
	pattern := "/api/users/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMyRealworldAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) CommentsArticle(ctx context.Context, in *CommentsArticleReq, opts ...http.CallOption) (*CommentsArticleRsp, error) {
	var out CommentsArticleRsp
	pattern := "/api/articles/{slug}/comments"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMyRealworldCommentsArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Comment, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...http.CallOption) (*CreateArticleRsp, error) {
	var out CreateArticleRsp
	pattern := "/api/articles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMyRealworldCreateArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) CurrentUser(ctx context.Context, in *CurrentUserReq, opts ...http.CallOption) (*CurrentUserRsp, error) {
	var out CurrentUserRsp
	pattern := "/api/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMyRealworldCurrentUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...http.CallOption) (*DeleteArticleRsp, error) {
	var out DeleteArticleRsp
	pattern := "/api/articles/{slug}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMyRealworldDeleteArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) DeleteComments(ctx context.Context, in *DeleteCommentsReq, opts ...http.CallOption) (*DeleteCommentsRsp, error) {
	var out DeleteCommentsRsp
	pattern := "/api/articles/{slug}/comments/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMyRealworldDeleteComments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) FavoriteArticle(ctx context.Context, in *FavoriteArticleReq, opts ...http.CallOption) (*CommentsArticleRsp, error) {
	var out CommentsArticleRsp
	pattern := "/api/articles/{slug}/favorite"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMyRealworldFavoriteArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) FollowUser(ctx context.Context, in *FollowUserReq, opts ...http.CallOption) (*FollowUserRsp, error) {
	var out FollowUserRsp
	pattern := "/api/profiles/{username}/follow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMyRealworldFollowUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) GetArticle(ctx context.Context, in *GetArticleReq, opts ...http.CallOption) (*GetArticleRsp, error) {
	var out GetArticleRsp
	pattern := "/api/articles/{slug}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMyRealworldGetArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) GetComments(ctx context.Context, in *GetCommentsReq, opts ...http.CallOption) (*GetCommentsRsp, error) {
	var out GetCommentsRsp
	pattern := "/api/articles/{slug}/comments"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMyRealworldGetComments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) GetTags(ctx context.Context, in *GetTagsReq, opts ...http.CallOption) (*GetTagsRsp, error) {
	var out GetTagsRsp
	pattern := "/api/tags"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMyRealworldGetTags))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) GetUser(ctx context.Context, in *GetUserReq, opts ...http.CallOption) (*GetUserRsp, error) {
	var out GetUserRsp
	pattern := "/api/profiles/{username}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMyRealworldGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) Register(ctx context.Context, in *RegisterReq, opts ...http.CallOption) (*RegisterRsp, error) {
	var out RegisterRsp
	pattern := "/api/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMyRealworldRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) UnfavoriteArticle(ctx context.Context, in *FavoriteArticleReq, opts ...http.CallOption) (*FavoriteArticleReq, error) {
	var out FavoriteArticleReq
	pattern := "/api/articles/{slug}/favorite"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMyRealworldUnfavoriteArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) UnfollowUser(ctx context.Context, in *FollowUserReq, opts ...http.CallOption) (*FollowUserRsp, error) {
	var out FollowUserRsp
	pattern := "/api/profiles/{username}/follow"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMyRealworldUnfollowUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) UpdateArticle(ctx context.Context, in *UpdateArticleReq, opts ...http.CallOption) (*UpdateArticleRsp, error) {
	var out UpdateArticleRsp
	pattern := "/api/articles/{slug}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMyRealworldUpdateArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MyRealworldHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...http.CallOption) (*UpdateUserRsp, error) {
	var out UpdateUserRsp
	pattern := "/api/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMyRealworldUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
